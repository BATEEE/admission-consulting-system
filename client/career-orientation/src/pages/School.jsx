import React, { useEffect, useState } from "react";
import { Card, Container, Table, Spinner, Form, Button } from "react-bootstrap";
import Apis, { endpoints } from "../configs/Apis";

const School = () => {
    const [schools, setSchools] = useState([]);
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [searchQuery, setSearchQuery] = useState("");
    const [isLoading, setIsLoading] = useState(true);
    const pageSize = 10;

    const loadSchools = async (page = 0, q = "") => {
        setIsLoading(true);
        try {
            const res = await Apis.get(
                `${endpoints["schools"]}?page=${page}&size=${pageSize}${q ? `&q=${q}` : ""}`
            );
            setSchools(res.data.content);
            setTotalPages(res.data.totalPages);
            setCurrentPage(page);
        } catch (error) {
            console.error("L·ªói khi load schools:", error);
            setSchools([]);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        loadSchools();
    }, []);

    const handleSearch = (e) => {
        e.preventDefault();
        loadSchools(0, searchQuery);
    };

    const handlePrev = () => {
        if (currentPage > 0) loadSchools(currentPage - 1, searchQuery);
    };

    const handleNext = () => {
        if (currentPage < totalPages - 1) loadSchools(currentPage + 1, searchQuery);
    };

    return (
        <Container 
            className="my-4"
            style={{ 
                maxWidth: "1000px", // Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa tr√™n PC
                color: "#1b2b48" 
            }}
        >
            <h1 className="pb-2 text-center">ƒêH - HV ·ªü Vi·ªát Nam</h1>
            <hr />
            <p className="pt-2 text-center">
                D∆∞·ªõi ƒë√¢y l√† danh s√°ch th·ªëng k√™ nh·ªØng tr∆∞·ªùng ƒë·∫°i h·ªçc, h·ªçc vi·ªán ·ªü Vi·ªát Nam
                ƒë∆∞·ª£c ch√∫ng t√¥i c·∫≠p nh·∫≠t, b·ªï sung m·ªõi nh·∫•t. ƒê·ªÉ xem chi ti·∫øt th√¥ng tin
                tuy·ªÉn sinh, c√°c b·∫°n h√£y click v√†o t·ª´ng tr∆∞·ªùng ƒë·ªÉ bi·∫øt c√°c ng√†nh ƒë√†o t·∫°o,
                ch·ªâ ti√™u c≈©ng nh∆∞ ƒëi·ªÉm chu·∫©n nƒÉm g·∫ßn nh·∫•t.
            </p>

            {/* ƒêi·ªÅu ch·ªânh Search form */}
            <Form 
                className="d-flex flex-column flex-md-row justify-content-center my-4 p-3 bg-light rounded-3" 
                onSubmit={handleSearch}
            >
                <Form.Control
                    type="text"
                    placeholder="T√¨m t√™n ho·∫∑c m√£ tr∆∞·ªùng..."
                    // w-100 tr√™n mobile, w-75 tr√™n m√†n h√¨nh trung b√¨nh tr·ªü l√™n (md)
                    className="me-md-2 w-100 w-md-75 mb-2 mb-md-0" 
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                />
                <Button 
                    type="submit" 
                    variant="primary"
                    // w-100 tr√™n mobile, t·ª± ƒë·ªông co l·∫°i tr√™n m√†n h√¨nh trung b√¨nh
                    className="w-100 w-md-auto" 
                >
                    T√¨m ki·∫øm
                </Button>
            </Form>

            {isLoading ? (
                <div className="text-center py-5">
                    <Spinner animation="border" variant="primary" role="status" />
                </div>
            ) : (
                <>
                    {/* Gi·ªØ nguy√™n ph·∫ßn hi·ªÉn th·ªã b·∫£ng v√† d·ªØ li·ªáu, v√¨ Table responsive ƒë√£ x·ª≠ l√Ω t·ªët */}
                    <Card className="shadow-sm rounded-3">
                        <Card.Body className="p-0">
                            {/* Table responsive ƒë√£ l√† m·ªôt ƒëi·ªÉm c·ªông l·ªõn cho di ƒë·ªông */}
                            <Table hover responsive className="align-middle mb-0 text-center">
                                <thead className="table-light">
                                    <tr>
                                        <th className="text-center">STT</th>
                                        <th className="text-center">M√£ tr∆∞·ªùng</th>
                                        <th>T√™n tr∆∞·ªùng</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {schools.length > 0 ? (
                                        schools.map((item, index) => (
                                            <tr key={item.id}>
                                                <td className="text-center">{currentPage * pageSize + index + 1}</td>
                                                <td className="text-center fw-bold">{item.code}</td>
                                                <td className="text-start text-primary fw-semibold">üéì {item.name}</td>
                                            </tr>
                                        ))
                                    ) : (
                                        <tr>
                                            <td colSpan="3" className="text-center text-secondary py-3">
                                                Kh√¥ng c√≥ d·ªØ li·ªáu
                                            </td>
                                        </tr>
                                    )}
                                </tbody>
                            </Table>
                        </Card.Body>
                    </Card>

                    {/* Pagination */}
                    <div className="d-flex justify-content-center align-items-center gap-3 mt-3">
                        <Button variant="outline-primary" onClick={handlePrev} disabled={currentPage === 0}>
                            &laquo; Prev
                        </Button>
                        <span className="fw-bold">
                            Trang {currentPage + 1} / {totalPages}
                        </span>
                        <Button
                            variant="outline-primary"
                            onClick={handleNext}
                            disabled={currentPage === totalPages - 1 || totalPages === 0}
                        >
                            Next &raquo;
                        </Button>
                    </div>
                </>
            )}
        </Container>
    );
};

export default School;